1) Декоратор имеет тот же супертип, что и декорируемые объекты
2) Объект можно завернуть в один или несколько декораторов
3) Так как декоратор относиться  к тому же супертипу, что и декорируемый объект, мы можем передать
декорированный объект вместо исходного
4) Декоратор добавляет свое поведение до и (или) после делегированния операций декорируемому объекту,
выполняющему остальную работу.
5) Объект может быть декорирован в любой момент времени, так что мы можем декорировать объекты динамически
и с произвольным количеством декораторов

Паттерн декоратор динамически наделяет объект новыми возможностями и является гибкой альтернативой
субклассированию в области расширения функциональности

* Наследование - одна из форм расширения, но оно не всегда обеспечивает гибкость архитектуры
* Следует предусмотреть возможность расширения поведения без изменения существующего кода
* Композиция и делегирование часто используются для динамическо8го добавления нового поведения
* Паттерн Декоратор предоставляет альтернативу субклассированию в области расширения поведения
* Типы декораторов соответствуют типам декорируемых компонентов (соответствие достигается путем наследования
или реализации интерфейса)
* Декораторы изменяют поведение компонентов, добавляя новую функциональность
до и (или) после (или даже вместо) вызывов методов компонентов.
* Компонент может декорироваться любым количеством декораторов.
* Декораторы обычно прозрачны для клиентов компонента
(если клиентский код не зависит от конкретного типа компонента)